---
import Layout from "../../layouts/BlogPost.astro";
import LinkCard from "../../components/LinkCard.astro";
import MarkdownBody from "../../components/MarkdownBody.astro";
import { getBlogs, getBlogDetail} from "../../library/microcms";

// 生成する記事のIDを全て取得
export async function getStaticPaths() {
  const response = await getBlogs({ fields: ["id"] });
  return response.contents.map((content: any) => ({
    params: {
      blogId: content.id,
    },
  }));
}

//記事の詳細情報を取得
const { blogId } = Astro.params;
const blog = await getBlogDetail(blogId as string);

//次の記事のIDを取得
const nextBlogResponse = await getBlogs({ limit: 1, filters: `publishedAt[greater_than]`+ blog.publishedAt, orders:"publishedAt", fields: ["id", "title"]})
const nextBlogId = nextBlogResponse.contents[0]?.id
const nextBlogTitle = nextBlogResponse.contents[0]?.title

//前の記事のIDを取得
const prevBlogResponse = await getBlogs({ limit: 1, filters: `publishedAt[less_than]`+ blog.publishedAt, orders:"-publishedAt", fields: ["id", "title"]})
const prevBlogId = prevBlogResponse.contents[0]?.id
const prevBlogTitle = prevBlogResponse.contents[0]?.title
---

<Layout content={{
    title: blog.title,
    description: blog.tags,
    heroImage: blog.eyecatch?.url ?? '',
    pubDate: new Date(blog.publishedAt).toLocaleDateString('ja-JP', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }),
    updatedDate: new Date(blog.updatedAt).toLocaleDateString('ja-JP'),
    tags: blog.tags ?? '',
    nextBlogId: nextBlogId,
    prevBlogId: prevBlogId,
    nextBlogTitle: nextBlogTitle,
    prevBlogTitle: prevBlogTitle
}}>

<!-- 記事本文の作成 -->
{blog.articleContent.map((content) => {
  switch (content.fieldId) {
    case 'richText':
      return <MarkdownBody markDownBody={content.richText} />
    case 'articleLink':
      return <LinkCard url={content.articleLink} />
    case 'imageUrl':
      return `<img src=${content.imageUrl} />`   
    default:
      break;
  }
})}
</Layout>